import { Vector3 } from './math';
export declare type InputEventKind = 'BUTTON_A_DOWN' | 'BUTTON_A_UP';
/**
 * @public
 */
export declare enum Pointer {
    PRIMARY = "PRIMARY",
    SECONDARY = "SECONDARY"
}
export declare type InputState = Record<Pointer, {
    BUTTON_A_DOWN: boolean;
}>;
export declare type EnginePointerEvent = {
    /** Origin of the ray */
    from: {
        x: number;
        y: number;
        z: number;
    };
    /** Direction vector of the ray (normalized) */
    direction: {
        x: number;
        y: number;
        z: number;
    };
    /** Length of the ray */
    length: number;
    /** ID of the pointer that triggered the event */
    pointerId: number;
};
export declare type PointerEvent = {
    /** Origin of the ray */
    from: Vector3;
    /** Direction vector of the ray (normalized) */
    direction: Vector3;
    /** Length of the ray */
    length: number;
    /** ID of the pointer that triggered the event */
    pointerId: Pointer;
};
/**
 * @public
 */
export declare class Input {
    private static _instance;
    static readonly instance: Input;
    readonly state: Readonly<InputState>;
    private subscriptions;
    private internalState;
    constructor();
    /**
     * Subscribes to an input event and triggers the provided callback.
     *
     * Returns a function that can be called to remove the subscription.
     * @param eventName - The name of the event (see InputEventKind).
     * @param fn - A callback function to be called when the event is triggered.
     */
    subscribe(eventName: InputEventKind, fn: (e: PointerEvent) => void): () => void;
    /**
     * Removes an existing input event subscription.
     * @param eventName - The name of the event (see InputEventKind).
     * @param fn - The callback function used when subscribing to the event.
     */
    unsubscribe(eventName: InputEventKind, fn: (e: PointerEvent) => void): void;
    private getPointerById;
    private handlePointerUp;
    private handlePointerDown;
}
