### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Input
    name: Input
    fullName: Input
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Input.constructor
      - decentraland-ecs.Input.instance
      - decentraland-ecs.Input.state
      - decentraland-ecs.Input.subscribe
      - decentraland-ecs.Input.unsubscribe
  - uid: decentraland-ecs.Input.constructor
    summary: 'Constructs a new instance of the [Input](xref:decentraland-ecs.Input) class'
    name: constructor()
    fullName: constructor
    langs:
      - typeScript
    type: constructor
    syntax:
      content: constructor();
  - uid: decentraland-ecs.Input.instance
    name: instance
    fullName: instance
    langs:
      - typeScript
    type: property
    syntax:
      content: 'static readonly instance: Input;'
      return:
        type:
          - decentraland-ecs.Input
  - uid: decentraland-ecs.Input.state
    name: state
    fullName: state
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly state: Readonly<InputState>;'
      return:
        type:
          - Readonly<InputState>
  - uid: decentraland-ecs.Input.subscribe
    summary: |-
      Subscribes to an input event and triggers the provided callback.

      Returns a function that can be called to remove the subscription.
    name: 'subscribe(eventName, fn)'
    fullName: subscribe
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subscribe(eventName: InputEventKind, fn: (e: PointerEvent) => void): () => void;'
      return:
        type:
          - () => void
        description: ''
      parameters:
        - id: eventName
          description: The name of the event (see InputEventKind).
          type:
            - InputEventKind
        - id: fn
          description: A callback function to be called when the event is triggered.
          type:
            - '(e: PointerEvent) => void'
  - uid: decentraland-ecs.Input.unsubscribe
    summary: Removes an existing input event subscription.
    name: 'unsubscribe(eventName, fn)'
    fullName: unsubscribe
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unsubscribe(eventName: InputEventKind, fn: (e: PointerEvent) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventName
          description: The name of the event (see InputEventKind).
          type:
            - InputEventKind
        - id: fn
          description: The callback function used when subscribing to the event.
          type:
            - '(e: PointerEvent) => void'
