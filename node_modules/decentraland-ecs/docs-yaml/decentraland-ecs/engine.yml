### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Engine
    name: Engine
    fullName: Engine
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Engine.constructor
      - decentraland-ecs.Engine.addEntity
      - decentraland-ecs.Engine.addSystem
      - decentraland-ecs.Engine.disposableComponents
      - decentraland-ecs.Engine.disposeComponent
      - decentraland-ecs.Engine.entities
      - decentraland-ecs.Engine.eventManager
      - decentraland-ecs.Engine.getComponentGroup
      - decentraland-ecs.Engine.getEntitiesWithComponent
      - decentraland-ecs.Engine.registerComponent
      - decentraland-ecs.Engine.removeComponentGroup
      - decentraland-ecs.Engine.removeEntity
      - decentraland-ecs.Engine.removeSystem
      - decentraland-ecs.Engine.rootEntity
      - decentraland-ecs.Engine.update
      - decentraland-ecs.Engine.updateComponent
  - uid: decentraland-ecs.Engine.constructor
    summary: 'Constructs a new instance of the [Engine](xref:decentraland-ecs.Engine) class'
    name: constructor()
    fullName: constructor
    langs:
      - typeScript
    type: constructor
    syntax:
      content: constructor();
  - uid: decentraland-ecs.Engine.addEntity
    name: addEntity(entity)
    fullName: addEntity
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addEntity(entity: Entity): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: entity
          description: ''
          type:
            - decentraland-ecs.Entity
  - uid: decentraland-ecs.Engine.addSystem
    name: 'addSystem(system, priority)'
    fullName: addSystem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSystem(system: ISystem, priority?: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: system
          description: ''
          type:
            - decentraland-ecs.ISystem
        - id: priority
          description: ''
          type:
            - number
  - uid: decentraland-ecs.Engine.disposableComponents
    name: disposableComponents
    fullName: disposableComponents
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly disposableComponents: Readonly<Record<string, DisposableComponentLike>>;'
      return:
        type:
          - 'Readonly<Record<string, DisposableComponentLike>>'
  - uid: decentraland-ecs.Engine.disposeComponent
    name: disposeComponent(component)
    fullName: disposeComponent
    langs:
      - typeScript
    type: method
    syntax:
      content: 'disposeComponent(component: DisposableComponentLike): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: component
          description: ''
          type:
            - decentraland-ecs.DisposableComponentLike
  - uid: decentraland-ecs.Engine.entities
    name: entities
    fullName: entities
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly entities: Readonly<Record<string, Entity>>;'
      return:
        type:
          - 'Readonly<Record<string, Entity>>'
  - uid: decentraland-ecs.Engine.eventManager
    name: eventManager
    fullName: eventManager
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly eventManager: EventManager;'
      return:
        type:
          - EventManager
  - uid: decentraland-ecs.Engine.getComponentGroup
    name: getComponentGroup(requires)
    fullName: getComponentGroup
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComponentGroup(...requires: ComponentConstructor<any>[]): ComponentGroup;'
      return:
        type:
          - ComponentGroup
        description: ''
      parameters:
        - id: requires
          description: ''
          type:
            - 'ComponentConstructor<any>[]'
  - uid: decentraland-ecs.Engine.getEntitiesWithComponent
    name: getEntitiesWithComponent(component)
    fullName: getEntitiesWithComponent
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntitiesWithComponent(component: string): Record<string, any>;'
      return:
        type:
          - 'Record<string, any>'
        description: ''
      parameters:
        - id: component
          description: ''
          type:
            - string
  - uid: decentraland-ecs.Engine.registerComponent
    name: registerComponent(component)
    fullName: registerComponent
    langs:
      - typeScript
    type: method
    syntax:
      content: 'registerComponent(component: DisposableComponentLike): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: component
          description: ''
          type:
            - decentraland-ecs.DisposableComponentLike
  - uid: decentraland-ecs.Engine.removeComponentGroup
    name: removeComponentGroup(componentGroup)
    fullName: removeComponentGroup
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeComponentGroup(componentGroup: ComponentGroup): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: componentGroup
          description: ''
          type:
            - ComponentGroup
  - uid: decentraland-ecs.Engine.removeEntity
    name: 'removeEntity(entity, removeChildren, newParent)'
    fullName: removeEntity
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeEntity(entity: Entity, removeChildren?: boolean, newParent?: Entity): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: entity
          description: ''
          type:
            - decentraland-ecs.Entity
        - id: removeChildren
          description: ''
          type:
            - boolean
        - id: newParent
          description: ''
          type:
            - decentraland-ecs.Entity
  - uid: decentraland-ecs.Engine.removeSystem
    name: removeSystem(system)
    fullName: removeSystem
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeSystem(system: ISystem): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: system
          description: ''
          type:
            - decentraland-ecs.ISystem
  - uid: decentraland-ecs.Engine.rootEntity
    name: rootEntity
    fullName: rootEntity
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rootEntity: Entity;'
      return:
        type:
          - decentraland-ecs.Entity
  - uid: decentraland-ecs.Engine.update
    name: update(dt)
    fullName: update
    langs:
      - typeScript
    type: method
    syntax:
      content: 'update(dt: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: dt
          description: ''
          type:
            - number
  - uid: decentraland-ecs.Engine.updateComponent
    name: updateComponent(component)
    fullName: updateComponent
    langs:
      - typeScript
    type: method
    syntax:
      content: 'updateComponent(component: DisposableComponentLike): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: component
          description: ''
          type:
            - decentraland-ecs.DisposableComponentLike
